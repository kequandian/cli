#!/usr/bin/env bash
usage() {
	cat <<- EOF
    Usage: dependency-pom [OPTIONS] <target>

    OPTIONS:
      -h --help        --print usage
      -x --xml         --print maven xml dependency
	EOF
	exit
}

## check options
target=$9
xml_opt=$9
for opt in $@;do
   if [[ $opt = '-h' || $opt = '--help' ]];then 
      usage
   elif [[ $opt = '-x' || $opt = '--xml' ]];then 
      xml_opt=$opt
   else
      target=$opt
   fi
done
if [ ! $target ];then 
   usage
fi
if [ ! -e $target ];then 
   usage
fi


parse_artifact(){
   local artifact=$1   
   local artifactId
   local artifact_classifier
   local artifact_version

   artifact=${artifact%.jar}
   artifact=${artifact##*/}

   artifactId=${artifact%-*}
   # echo artifactId= $artifactId
   artifact_classifier=${artifact##*-}
   # echo artifact_classifier= $artifact_classifier
   artifact_version=${artifactId##*-}
   # echo artifact_version= $artifact_version
   ########### comment out
   # echo artifact_classifier= $artifact_classifier
   # artifact_version_classifier=${artifact#*-}
   # echo artifact_version_classifier= $artifact_version_classifier
   # artifact_classifier=${artifact_version_classifier##*-}
   # echo artifact_classifier= $artifact_classifier
   ############
   if [[ $artifact_classifier = [0-9.]* ]];then 
      artifact_version=$artifact_classifier
      unset artifact_classifier
   fi
   if [[ $artifact_version = [0-9.]* ]];then 
      artifactId=${artifactId%-*}
   fi
   # echo artifactId= $artifactId

   ## get version
   if [ ! $artifact_version ];then
       artifact_version=${artifact_version_classifier%-*}
   fi
   echo $artifactId  $artifact_version $artifact_classifier
}

install_artifact(){
      artifact=$1
      artifact=${artifact%$'\n'}

   local groupId
   local artifactId
   local version
   local classifier

   # echo "jar tf $artifact | grep pom.properties | grep com.tools" > /dev/stderr
   local entry=$(jar tf $artifact | grep pom.properties)
   local entries=(${entry})
   if [ -z "$entry" ];then 
      echo no pom.properties entry found ! > /dev/stderr
      # artifactId=${artifact%.jar}
      # artifactId=${artifactId%-all}
      # artifactId=${artifactId%-RELEASE}
      parse_line=$(parse_artifact $artifact)
      parse_array=($parse_line)
      artifactId=${parse_array[0]}
      version=${parse_array[1]}
      classifier=${parse_array[2]}

   elif [[ ${#entries[@]} > 1 ]];then 
      echo multi pom.properties entries found, just get from artifact .. > /dev/stderr
      # artifactId=${artifact%.jar}
      # artifactId=${artifactId%-all}
      # artifactId=${artifactId%-RELEASE}
      parse_line=$(parse_artifact $artifact)
      parse_array=($parse_line)
      artifactId=${parse_array[0]}
      version=${parse_array[1]}
      classifier=${parse_array[2]}

   else
      # echo jar xf $artifact $entry
      jar xf $artifact $entry
      if [ ! -f "$entry" ];then 
         echo fail to get pom.properties
         exit
      fi
      local content=$(cat $entry)
      for line in $content;do
         line=${line%$'\n'}
         line=${line%$'\r'}
         line=${line%$'\t'}
         # echo line=$line

         if [[ $line = artifactId=* ]];then 
            artifactId=${line#artifactId=}
         elif [[ $line = version=* ]];then
            version=${line#version=}
         elif [[ $line = groupId=* ]];then 
            groupId=${line#*=}
            # groupId=${line%$'\r'}
            if [[ $groupId = com.tools* ]];then 
               groupId='com.tools'
            elif [[ $groupId = com.jfeat* ]];then 
               groupId='com.jfeat'
            fi
         fi
      done
   fi

   if [ ! $artifactId ];then 
      echo fail to get 'groupId:artifactId:version' > /dev/stderr
      exit
   fi

   if [ -z "$xml_opt" ];then
      echo artifact= $artifact
      echo groupId= $groupId
      echo artifactId= $artifactId
      echo version= $version
   else
      echo '<dependency>'
      echo '   <groupId>'$groupId'</groupId>'
      echo '   <artifactId>'$artifactId'</artifactId>'
      echo '   <version>'$version'</version>'
      echo '</dependency>'
   fi
}

## main
if [ -d $target ];then 
   for it in $(ls $target);do
      install_artifact $target/$it
   done
else
  install_artifact $target
fi
